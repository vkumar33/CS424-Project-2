states3 <- unique(allData3[,1])
years4<-c(1990:2018)
aqip <- c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous","Ozone", "SO2", "CO", "NO2", "PM2_5", "PM_10")
counties4 <- hourlydata[,7]
states4 <- unique(hourlydata[,6])
# Create the shiny dashboard
ui <- dashboardPage(
dashboardHeader(title = "Just Breathe"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
selectInput("Year", "Select the year to visualize", years, selected = 2018),
selectInput("State", "Select the State to visualize", states, selected = "Illinois"),
selectInput("County", "Select the County to visualize", counties, selected = "Cook"),
sidebarMenu(
menuItem("About",tabName = "about"),
menuItem("AQI Quality",tabName = "aqiquality"),
menuItem("Pollutant Types",tabName = "Pollutant"),
menuItem("Compare Data of 3 Counties", tabName = "comparedata"),
menuItem("AQI Comparision",tabName = "aqicompare"),
menuItem("Compare Map",tabName = "comparemap"),
menuItem("Compare Hourly Plotly",tabName = "comparehourlyp")
)),
dashboardBody(
tabItems(
tabItem("about", includeHTML("about.html")),
tabItem("aqiquality",
fluidRow(
column(12,
fluidRow(
box(
width = 18,
status = "info",
dataTableOutput("AQIQualityTable")
),
box(
width=15,status = "info", plotlyOutput("AQImaxq")
)
)
),
column(4,
fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("AQIPiePlot")
)
)
),
column(5,
fluidRow(
box(
width = 18,
status = "info",
plotlyOutput("AQIBarGraph")
)
)
)
)
),
tabItem("Pollutant",
fluidRow(
column(12,
fluidRow(
box(
width = 14,
status = "info",
dataTableOutput("PollutantinfoTable")
),
box(width = 14, status = "info",dataTableOutput("PollutantTypeTable")),
box(width=15,status = "info", plotlyOutput("Pollutantline"))
)
),
column(4,
fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("PollutantinfoPiePlot")
)
)),
column(4,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("PollutantinfoBarGraph")
))),
column(4,fluidRow(
box(title = "Leaflet Map", solidHeader = TRUE, status = "primary", width = 12,
leafletOutput("leafmap")
)
)
)
)
),
tabItem("aqicompare",
fluidRow(
column(12,
fluidRow(
box(width = 18,status = "info",dataTableOutput("AQIcompareTable")),
box(width=15,status = "info", plotlyOutput("AQIcomparemaxq"))
)
),
column(5,
fluidRow(box(width = 18,status = "info",plotlyOutput("AQIcompareBarGraph")))
)
)
),
tabItem("comparemap",
fluidRow(
fluidRow(
box(selectInput("Year4", "Select the year to visualize", years4, selected = 2018)),
box(selectInput("aqip", "Select the AQI or Pollutant Type to visualize", aqip, selected = "Moderate")),
box(sliderInput("slider1", label = h3("Number of Counties to be displayed"), min = 1, max = 500, value = 100)),
box(title = "Leaflet Map", solidHeader = TRUE, status = "primary", width = 12, leafletOutput("cmap"))
)
)
),
tabItem("comparehourlyp",
fluidRow(
fluidRow(
box(selectInput("State4", "Select the State to visualize", states4, selected = "Illinois")),
box(selectInput("County4", "Select the County to visualize", counties4, selected = "Cook")),
box(dateInput("start_date","From",value=format(as.Date(Sys.time(),"%Y-%m-%d",tz="Europe/Stockholm"),"%Y-%m-%d"))),
box(dateInput("end_date","To",value=format(as.Date(Sys.time(),"%Y-%m-%d",tz="Europe/Stockholm"),"%Y-%m-%d"))),
box(checkboxInput("Ozone", "Ozone", TRUE)),
box(checkboxInput("SO2", "SO2", FALSE)),
box(checkboxInput("CO", "CO", FALSE)),
box(checkboxInput("NO2", "NO2", FALSE)),
box(checkboxInput("PM2_5(Non-FRM)", "PM2_5_FRM", FALSE)),
box(checkboxInput("PM2_5(FEM)", "PM2_5_FEM", FALSE)),
box(checkboxInput("PM_10", "PM_10", FALSE)),
box(checkboxInput("Wind(Degree Compass)", "Wind_DC", FALSE)),
box(checkboxInput("Wind(Knots)", "Wind_Knot", FALSE)),
box(checkboxInput("Temperature", "Temperature", FALSE)),
box(width=15,status = "info", plotlyOutput("Hourlyline"))
)
)
),
tabItem("comparedata",
fluidRow(
fluidRow(box(width = 4, selectInput("Year1", "Select the year to visualize", years1, selected = 2018, width="120px"),
selectInput("State1", "Select the 1st State to visualize", states1, selected = "Illinois", width="120px"),
selectInput("County1", "Select the 1st County to visualize", counties1, selected = "Cook", width="120px")),
box(width = 4, selectInput("Year2", "Select the year to visualize", years2, selected = 2018, width="120px"),
selectInput("State2", "Select the 2nd State to visualize", states2, selected = "Illinois", width="120px"),
selectInput("County2", "Select the 2nd County to visualize", counties2, selected = "Cook",width="120px")),
box(width = 4, selectInput("Year3", "Select the year to visualize", years3, selected = 2018, width="120px"),
selectInput("State3", "Select the 3rd State to visualize", states3, selected = "Illinois", width="120px"),
selectInput("County3", "Select the 3rd County to visualize", counties3, selected = "Cook",width="120px"))),
column(12,
fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_aqiBarGraph")
)
)),
column(12,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_pollutantBarGraph")
))),
column(12,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_aqiLineGraph")
))),
column(12,fluidRow(
box(
width = 15,
status = "info",
plotlyOutput("Compare_pollutantLineGraph")
)))
)
)
)
)
)
runApp()
df5 <- combinemap[combinemap$Year ==  2018 & (combinemap$AQIP == "Good" | combinemap$PollutantsP == "Good"),]
if("Good" %in% c("Moderate" ,"Good" , "Unhealthy for Sensitive Groups", "Unhealthy", "Very Unhealthy","Hazardous")){
df5$value <- df5$AValues
df5 <- df5%>%
arrange(desc(AValues))
}else{
df5$value <- df5$PValues
df5 <- df5%>%
arrange(desc(PValues))
}
df5 <- as.data.frame(df5)
library(raster)
library(leaflet)
library(viridis)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
# Prepare data
# I do not know how your actual data is like. In this demonstration,
# I have data points for Adair in Iowa and Oklahoma. So
temp <- merge(USA, df5,
by.x = c("NAME_1", "NAME_2"), by.y = c("State", "County"),
all.x = TRUE)
# Create a color palette
mypal <- colorNumeric(palette = "viridis", domain = temp$value, na.color = "grey")
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,
fillColor = ~mypal(temp$value),
popup = paste("Region: ", temp$NAME_2, "<br>",
"Value: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Value",
opacity = 1)
load(file = "combinemap.Rda")
df5 <- combinemap[combinemap$Year ==  2018 & (combinemap$AQIP == "Good" | combinemap$PollutantsP == "Good"),]
if("Good" %in% c("Moderate" ,"Good" , "Unhealthy for Sensitive Groups", "Unhealthy", "Very Unhealthy","Hazardous")){
df5$value <- df5$AValues
df5 <- df5%>%
arrange(desc(AValues))
}else{
df5$value <- df5$PValues
df5 <- df5%>%
arrange(desc(PValues))
}
df5 <- as.data.frame(df5)
library(raster)
library(leaflet)
library(viridis)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
# Prepare data
# I do not know how your actual data is like. In this demonstration,
# I have data points for Adair in Iowa and Oklahoma. So
temp <- merge(USA, df5,
by.x = c("NAME_1", "NAME_2"), by.y = c("State", "County"),
all.x = TRUE)
# Create a color palette
mypal <- colorNumeric(palette = "viridis", domain = temp$value, na.color = "grey")
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,
fillColor = ~mypal(temp$value),
popup = paste("Region: ", temp$NAME_2, "<br>",
"Value: ", temp$value, "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = temp$value,
title = "Value",
opacity = 1)
runApp()
load(file = "hourlydata.Rda")
counties4 <- hourlydata[,7]
states4 <- unique(hourlydata[,6])
save(counties4, file = "counties4.Rda")
save(states4, file = "states4.Rda")
runApp()
runApp()
runApp()
runApp()
runApp()
load(file = "hourlydata.Rda")
hdata = hourlydata[hourlydata$State.Name  == input$State4 & hourlydata$County.Name == input$County4 & hourlydata$Date.GMT == as.Date(input$start_date, format = "%Y-%m-%d"),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load(file = "hourlydata.Rda")
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
library(ggplot2)
library(readr)
library(data.table)
library(parallel)
library(raster)
library(leaflet)
library(viridis)
library(zoo)
df6 <- hourlydata[hourlydata$Date.GMT == as.Date("2018-03-13", format = "%Y-%m-%d") & hourlydata$Parameter.Code== "42101",]
if("42101" %in% c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous")){
df6value <- df6$Sample.Measurement
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}else{
df6$value <- df6$Sample.Measurement
df6 <- df6%>%
arrange(desc(Sample.Measurement))
df6 <- as.data.frame(df6)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
temp <- merge(USA, df6,
by.x = c("NAME_1", "NAME_2"), by.y = c("State.Name", "County.Name"),
all.x = TRUE,duplicateGeoms = TRUE )
USA <-  getData("GADM", country = "usa", level = 2)
mypal <- colorNumeric(palette = "viridis", domain = head(temp$value,250), na.color = "grey", reverse = TRUE)
leaflet(data = head(temp,250)) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,
fillColor = ~mypal(head(temp$value,250)),
popup = paste("Region: ", head(temp$NAME_2,250), "<br>",
"Value: ", head(temp$value,250), "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = head(temp$value,250),
title = "Value",
opacity = 1)
df6 <- hourlydata[hourlydata$Date.GMT == as.Date("2018-03-13", format = "%Y-%m-%d") & hourlydata$Parameter.Code== "42101",]
if("42101" %in% c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous")){
df6value <- df6$Sample.Measurement
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}else{
df6$value <- df6$Sample.Measurement
df6 <- df6%>%
arrange(desc(Sample.Measurement))
df6 <- as.data.frame(df6)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
temp <- merge(USA, df6,by.x = c("NAME_1", "NAME_2"), by.y = c("State.Name", "County.Name"),all.x = TRUE,duplicateGeoms = TRUE )
df6 <- hourlydata[hourlydata$Date.GMT == as.Date("2018-03-13", format = "%Y-%m-%d") & hourlydata$Parameter.Code== "42101",]
if("42101" %in% c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous")){
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}else{
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}
df6 <- as.data.frame(df6)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
temp <- merge(USA, df6,by.x = c("NAME_1", "NAME_2"), by.y = c("State.Name", "County.Name"),all.x = TRUE,duplicateGeoms = TRUE )
leaflet(data = head(temp,250)) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,fillColor = ~mypal(head(temp$Sample.Measurement,250)),
popup = paste("Region: ", head(temp$NAME_2,250), "<br>","Value: ", head(temp$Sample.Measurement,250), "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = head(temp$Sample.Measurement,250),title = "Value",opacity = 1)
USA <-  getData("GADM", country = "usa", level = 2)
mypal <- colorNumeric(palette = "viridis", domain = head(temp$Sample.Measurement,250), na.color = "grey", reverse = TRUE)
leaflet(data = head(temp,250)) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,fillColor = ~mypal(head(temp$Sample.Measurement,250)),
popup = paste("Region: ", head(temp$NAME_2,250), "<br>","Value: ", head(temp$Sample.Measurement,250), "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = head(temp$Sample.Measurement,250),title = "Value",opacity = 1)
unique(hourlydata$Parameter.Code)
shiny::runApp()
runApp()
runApp()
memory.limit()
runApp()
runApp()
load(file = "hourlydata.Rda")
df6 <- hourlydata[hourlydata$Date.GMT == as.Date("2018-03-13", format = "%Y-%m-%d") & hourlydata$Parameter.Code== "42101",]
if("42101" %in% c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous")){
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}else{
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}
df6 <- as.data.frame(df6)
# Get USA polygon data
USA <- getData("GADM", country = "usa", level = 2)
temp <- merge(USA, df6,by.x = c("NAME_1", "NAME_2"), by.y = c("State.Name", "County.Name"),all.x = TRUE,duplicateGeoms = TRUE )
USA <-  getData("GADM", country = "usa", level = 2)
mypal <- colorNumeric(palette = "viridis", domain = head(temp$Sample.Measurement,250), na.color = "grey", reverse = TRUE)
leaflet(data = head(temp,250)) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,fillColor = ~mypal(head(temp$Sample.Measurement,250)),
popup = paste("Region: ", head(temp$NAME_2,250), "<br>","Value: ", head(temp$Sample.Measurement,250), "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = head(temp$Sample.Measurement,250),title = "Value",opacity = 1)
save(USA, file = "USA.Rda")
load(file = "hourlydata.Rda")
load(file = "USA.Rda")
df6 <- hourlydata[hourlydata$Date.GMT == as.Date("2018-03-13", format = "%Y-%m-%d") & hourlydata$Parameter.Code== "42101",]
if("42101" %in% c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous")){
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}else{
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}
df6 <- as.data.frame(df6)
# Get USA polygon data
temp <- merge(USA, df6,by.x = c("NAME_1", "NAME_2"), by.y = c("State.Name", "County.Name"),all.x = TRUE,duplicateGeoms = TRUE )
#USA <-  getData("GADM", country = "usa", level = 2)
mypal <- colorNumeric(palette = "viridis", domain = head(temp$Sample.Measurement,250), na.color = "grey", reverse = TRUE)
leaflet(data = head(temp,250)) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 39.8283, lng = -98.5795, zoom = 4) %>%
addPolygons(data = USA, stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,fillColor = ~mypal(head(temp$Sample.Measurement,250)),
popup = paste("Region: ", head(temp$NAME_2,250), "<br>","Value: ", head(temp$Sample.Measurement,250), "<br>")) %>%
addLegend(position = "bottomleft", pal = mypal, values = head(temp$Sample.Measurement,250),title = "Value",opacity = 1)
runApp()
load(file = "hourlydata.Rda")
load(file = "USA.Rda")
df6 <- hourlydata[hourlydata$Date.GMT == as.Date("2018-03-13", format = "%Y-%m-%d") & hourlydata$Parameter.Code== "42101",]
if("42101" %in% c("Moderate" ,"Good" , "Unhealthy(Sensitive)", "Unhealthy", "Very Unhealthy","Hazardous")){
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}else{
df6 <- df6%>%
arrange(desc(Sample.Measurement))
}
View(df6)
View(df6)
View(USA)
View(USA)
runApp()
runApp()
runApp()
?enableBookmarking
?fluidPage
?enableBookmarking
runApp()
runApp()
runApp()
install.packages("devtools")
devtools::install_github('hadley/ggplot2')
library(ggplotly)
install.packages("ggplotly")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library(shiny)
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
library(ggplot2)
library(readr)
library(data.table)
library(parallel)
library(raster)
library(leaflet)
library(viridis)
library(zoo)
load(file = "hourlydata.Rda")
hourlydata$check <- paste(hourlydata$State.Name,hourlydata$County.Name,hourlydata$Parameter.Code,hourlydata$Date.GMT)
hr <- hourlydata[!duplicated(hourlydata$check),]
View(hr)
temp1 = list.files(pattern="^hourly.*csv")
hourly <- lapply(temp1, fread, select =c(9,12,13,14,22,23))
hourlydata <- do.call(rbind, hourly)
hourlydata$`Date GMT` <- as.Date(fast_strptime(hourlydata$`Date GMT`, "%Y-%m-%d"))
hourlydata <- data.frame(hourlydata)
temp1 <- NULL
hourly <- NULL
hourlydata$Parameter.Name <- as.factor(hourlydata$Parameter.Name)
hourlydata$State.Name <- as.factor(hourlydata$State.Name)
hourlydata$County.Name <- as.factor(hourlydata$County.Name)
hourlydata <- hourlydata %>%
distinct(Parameter.Name,State.Name,County.Name,Time.GMT, .keep_all = TRUE)
library(shiny)
library(shinydashboard)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(tidyr)
library(plotly)
library(magrittr)
library(dplyr)
library(pillar)
library(tidyverse)
library(ggplot2)
library(readr)
library(data.table)
library(parallel)
library(raster)
library(leaflet)
library(viridis)
library(zoo)
temp1 = list.files(pattern="^hourly.*csv")
hourly <- lapply(temp1, fread, select =c(9,12,13,14,22,23))
hourlydata <- do.call(rbind, hourly)
hourlydata$`Date GMT` <- as.Date(fast_strptime(hourlydata$`Date GMT`, "%Y-%m-%d"))
hourlydata <- data.frame(hourlydata)
temp1 <- NULL
hourly <- NULL
hourlydata$Parameter.Name <- as.factor(hourlydata$Parameter.Name)
hourlydata$State.Name <- as.factor(hourlydata$State.Name)
hourlydata$County.Name <- as.factor(hourlydata$County.Name)
hourlydata <- hourlydata %>%
distinct(Parameter.Name,State.Name,County.Name,Time.GMT, .keep_all = TRUE)
save(hourlydata, file = "hourlydata.Rda")
runApp('test.R')
shiny::runApp()
